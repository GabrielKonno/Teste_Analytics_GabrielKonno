# -*- coding: utf-8 -*-
"""Limpeza e Análise de Dados de Vendas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sWxaWpSdQS-Ian9mLC9gvBRx8GZgnTkB

# Parte 1: Programação em Python
## Criando Dataset Simulado
"""

import pandas as pd
import numpy as np
import random as rnd
import datetime as dt

# Criação da lista ID

ID = list(range(1,101))

# Criar Lista Produtos e Categoria
## Lista de Produtos

lista_produtos = [
    "Smartphone",
    "Notebook",
    "Fone de Ouvido",
    "Camiseta",
    "Livro",
    "Relógio",
    "Cadeira",
    "Mesa",
    "Monitor",
    "Teclado",
    "Calça",
    "Casaco",
    "Sofá"
]

## Dicionário de categorias e seus respectivos produtos

categorias = {
    "Eletrônicos": [
        "Smartphone",
        "Notebook",
        "Fone de Ouvido",
        "Monitor",
        "Teclado"
    ],
    "Vestuário": [
        "Camiseta",
        "Relógio",
        "Calça",
        "Casaco"
    ],
    "Móveis": [
        "Cadeira",
        "Mesa",
        "Sofá"
    ],
    "Livros": [
        "Livro"
    ]
}

## Randomizando produtos

Produto = []

for i in range(len(ID)):
    produto = rnd.choice(lista_produtos)
    Produto.append(produto)

## Encontrando Categoria
def encontrar_categoria(produto, categorias_dict):
    for categoria, produtos in categorias_dict.items():
        if produto in produtos:
            return categoria
    return "Categoria Desconhecida"

## Definindo a Categoria de cada produto randomizado

Categoria = []

if __name__ == "__main__":
    for produto in Produto:
        categoria = encontrar_categoria(produto, categorias)
        Categoria.append(categoria)

# Definindo a quantidade

Qtd = []
for i in range(len(ID)):
    qtd = rnd.randint(1,20)
    Qtd.append(qtd)

# Definindo Preço

Preço = []
for i in range(len(ID)):
  if Categoria[i] == "Eletrônicos":
    preco = round(rnd.uniform(1399.99,12999.99), 2)
  elif Categoria[i] == "Vestuário":
    preco = round(rnd.uniform(99.99,1199.99), 2)
  elif Categoria[i] == "Móveis":
    preco = round(rnd.uniform(199.99,4999.99), 2)
  elif Categoria[i] == "Livros":
    preco = round(rnd.uniform(19.99,499.99), 2)
  else:
    preco = 0.0
  Preço.append(preco)

# Gerando as datas

dt_inicial = dt.datetime(2023, 1, 1)
dt_final = dt.datetime(2023, 12, 31)

dias_total = dt_final - dt_inicial

Data = []

for i in range(len(ID)):
    dias_aleatorios = rnd.randrange(dias_total.days + 1)
    data = (dt_inicial + dt.timedelta(days=dias_aleatorios)).date()
    Data.append(data.strftime("%d/%m/%Y"))

# Verificando tamanho das listas
print("ID:", len(ID))
print("Categoria:", len(Categoria))
print("Produto:", len(Produto))
print("Data:", len(Data))
print("Preço:", len(Preço))
print("Qtd:", len(Qtd))

# Criando DF
df = pd.DataFrame({
    "ID": ID,
    "Categoria": Categoria,
    "Produto": Produto,
    "Data": Data,
    "Preço": Preço,
    "Qtd": Qtd
})

df.tail()

# Set Index = ID
df = df.set_index("ID")
df.tail()

# Introduzindo valores faltantes em 5% dos dados
for col in df.columns:
    df.loc[df.sample(frac=0.05).index, col] = np.nan

# Concatenando o DataFrame com algumas linhas duplicadas
df = pd.concat([df, df.sample(n=5)], ignore_index=True)

df.tail()

df.to_csv('data_simulado.csv', index=True)

"""# Limpeza dos Dados"""

!pip install pandas-profiling==3.3.0

!pip install --upgrade numba==0.58.1 visions==0.7.5

import pandas as pd
import numpy as np
from pandas_profiling import ProfileReport

import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("data_simulado.csv")
df.head()

df = df.rename(columns={'Unnamed: 0': 'ID'})

df = df.set_index("ID")

df.head()

df.describe()

ProfileReport(df)

"""# Conclusões do Profiling

- Vendas foram feitas em 81 dias diferentes.
- Alta correlação da data com a categoria, o que pode indicar uma preferência por determinados produtos devido a época.
- Preço é relacionado com as categorias, indicando intervalos de preços diferentes para cada categoria.
- Qtd é relacionada com produto, o que pode indicar uma demanda de produtos específicos.
"""

df = df.dropna()

df = df.drop_duplicates()

df.info()

df['Categoria'] = df['Categoria'].astype(str)
df['Produto'] = df['Produto'].astype(str)
df['Data'] = pd.to_datetime(df['Data'])
df['Preço'] = df['Preço'].astype(float)
df['Qtd'] = df['Qtd'].astype(int)

df.info()

df.info()

df.to_csv('data_clean.csv', index=True)

"""# Iniciando Análises"""

# Calculando total de vendas por produto

df['Venda_Total'] = df['Preço'] * df['Qtd']

df.head()

# Identificando Produto com maior número de Vendas Totais

df.groupby('Produto')['Venda_Total'].sum().sort_values(ascending=False).head()

